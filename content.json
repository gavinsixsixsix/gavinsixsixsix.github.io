{"meta":{"title":"Gavin's Blog","subtitle":"","description":"","author":"gavin","url":"http://example.com","root":"/"},"pages":[{"title":"自我介绍","date":"2021-05-02T08:11:25.151Z","updated":"2021-03-28T07:40:06.699Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"这是一段自我介绍"}],"posts":[{"title":"","slug":"1234","date":"2021-05-02T08:14:32.699Z","updated":"2021-05-02T08:15:19.795Z","comments":true,"path":"2021/05/02/1234/","link":"","permalink":"http://example.com/2021/05/02/1234/","excerpt":"","text":"今天天气真好","categories":[],"tags":[]},{"title":"h5-移动端适配","slug":"h5-移动端适配","date":"2021-03-12T06:38:45.651Z","updated":"2021-03-28T07:44:15.864Z","comments":true,"path":"2021/03/12/h5-移动端适配/","link":"","permalink":"http://example.com/2021/03/12/h5-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/","excerpt":"","text":"移动适配布局 h5 是 HTML5 的简称 浏览器的厂商 IE(Edge)、firefox、chrome(chromium)、safari(webkit)、Opera【渲染引擎】 html5是html的第五个版本，2014年W3C（万维网联盟），宣布HTML5正式定稿，致力于web applications 的开发与移动端设备的交互。 html5是一个标准，也是一套解决方案，这套解决方案可以利用html + css + js实现更高级的用户体验和开发体验。（html5 + css 3 + js es5 es 6….) header、footer、video、audio、canvas…(html 标签 W3c标准中 结构标准，更多注重的 语义化) html emmbed frame header:first-child{}、input[id=’btn’] [一个 : 表示 的是伪类 ，两个冒号 表示的是伪元素，一个冒号也可以表示伪元素。] &lt;br /&gt; : 拖拽 手指触摸事件 本地存储 离线存储 网络状态 语音识别 多媒体 陀螺仪 摄像头 websocket通信 … H5(遵循html5标准开发的项目)可以运行在windows、mac、iPhone、Android等平台设备上。 通常的H5项目，指的是移动端网页项目。 … H5适配1.为什么要适配a) 为了适应各种移动端设备，完美呈现应有的布局效果 b) 各个移动端设备，分辨率大小不一致，网页想铺满整个屏幕，并在各种分辨下等比缩放 现在主流的开发思路 PC端 和移动端 分开开发( 分开开发 也是要写 两套代码) 如果想在既能适应PC、又能适应移动端 响应式开发（麻烦 写好多套css ） 2.概念知识2.1 屏幕尺寸 屏幕对角线的长度，单位是英寸。 1英寸=2.54厘米，6*2.54 = 15.24厘米 2.2 屏幕分辨率 像素：像素是由图像的小方格组成，小方格都有一个明确的位置和倍分配的色彩值。 在横纵方向上的像素点，单位是px，1px=1个像素点（这里的1像素指的是物理设备的1个像素点） pixel 屏幕分辨率越高，显示效果越精细。（分辨率 指的 像素点的个数） iPhoe 6的分辨率是1334*750像素，一般是纵向像素*横向像素来表示一个手机的分辨率 1080P(P指的是逐行扫描)、2K、4K 2.3 像素密度 屏幕分辨率与尺寸构成了像素密度。 屏幕上每英寸可以显示的像素点数量，单位是ppi（pixels per inch的缩写） 2.54厘米 能显示多少个像素点 600 屏幕像素密度与屏幕分辨率和屏幕尺寸有关，像素密度越高，屏幕能够以越高的密度显示图像。 2.4 css像素 css像素是为web开发者根据设计图表示web页面上内容大小的抽象单位，主要使用在浏览器上 px是一个相对单位，由开发者来使用，也称为逻辑像素。（代码概念、逻辑概念） 一个标准的显示密度下（普通屏），一个css像素对应着一个设备像素。在页面不缩放的情况下，1px的CSS像素 === 1设备独立像素 页面放大200%时，页面的设备独立像素依旧不变，放大的是CSS像素。但是此时CSS像素与设备独立像素的关系变化了，1px === 4独立像素（宽x2，高x2），经过计算机计算，内部 原本设定 1px ，变成 2px 2.5 设备像素/物理像素 显示器的最小物理单位（对于一个显示器来说是固定的） 以手机屏幕为例，屏幕上的真实像素 设备出厂时候的一个宽高（device pixels） 2.6 Css像素与物理像素的关系 div {width: 100px;} 表示占据了100个像素 ，在普通屏幕，pc端所有的屏幕都是普通屏幕，100px 100个像素占据多少个物理像素，取决于屏幕的特性（是否高密度，像素比）和用户的缩放行为 iPhone 6的Retina HD 高清视网膜显示屏中，因为视网膜的像素密度是普通屏幕的2倍，所以这个div就占了200个设备像素，如果用户放大，它将占据更多的设备像素。如 iPhone 6 plus ，就会占300个像素。 在正常情况下，普通屏幕中，假设 ppi 为 100， 他的ppi 2 * 100 ， 每英寸 有 200个像素点。 2.7 设备独立像素 密度无关像素，可以认为是计算机坐标系中的一个点，这个点代表一个由程序员使用的虚拟像素（Css设置的像素），然后由相关设备转换成物理像素，去显示对应的大小。 设备独立像素是一个总体概念，包括了Css像素。 对于开发者来说，并不在意一个Css像素到底跨越了多少个设备像素，因为Css和Js定义的像素本质上代表的都是Css像素，如何显示对应的大小依赖于屏幕特性和用户缩放程度的复杂计算交给了浏览器。 开发的时候，你不需要去关心，你写的代码 ，在屏幕设备上 到底占用了多少像素，浏览器会经过计算 屏幕 密度 和 缩放。 通过 window.screen.width/ window.screen.height 查看 375 2.8 像素比(dpr) devicePixelRatio指的是物理像素和设备独立像素的比 即1独立像素由多少物理像素渲染。 window.devicePixelRatio可查看 设备像素比 devicePixelRatio = 物理像素/独立像素 2.9 位图像素 一个位图像素是栅格图像（png、jpg、gif等）最小的数据单元，至少1个位图像素对应1个物理像素，图片才能得到完美清晰的展示。 在Retina屏幕下，会出现位图像素点不够的情况，导致图片模糊的情况。 对于dpr = 2的屏幕，一个位图像素对应4个物理像素，由于单个位图像素不可以再进一步分割，所以就进去色，导致图片模糊。 如200*300的img标签，需要提供400*600的图片，在Retina屏幕下，位图像素就可以和物理像素形成1:1的比例。 2.10 1像素问题因为不同设备具有不同的dpr + 所代表的设备像素不同, 所以在有些设备上看到的粗,有些设备看到的细,如何解决一像素边框问题, 方法一 通过媒体查询,查询设备的dpr,根据dpr设置不同的宽度大小 1234567891011#box{ height: 200px; border-bottom:1px solid red;}@media screen and (-webkit-min-device-pixel-ratio: 2) { #box { border-bottom: 0.5px solid #999 }}@media screen and (-webkit-min-device-pixel-ratio: 3) { #box{ border-bottom: 0.333333px solid blue }} 缺点: 小数像素目前兼容性较差，一些以前的版本可能不支持。 理论上最小的单位是 1px。 所以会出现有的设备写 0.5px 无效（没有边框）的情况。 方法二: 借助伪元素缩放处理 123456789101112.button:after{ content: \"\"; display: block; height: 0; border-top: #999 solid 1px; width: 100%; position: absolute; top: 0; right: 0; transform: scaleY(0.5); /* 将 1px 的线条缩小为原来的 50% */} 缺点: 不是所有设备的dpr都是2 所以固定缩放0.5 也会有问题 方法三 借助媒体查询和伪元素缩放来解决 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253// 定义mixin.border-1px(@color: rgba(7,17,27,0.2)){ position:relative; &amp;:after{ display:block; position:absolute; left:0; bottom:0; content:''; width:100%; border-top:1px solid @color; }}// 根据不同的dpr 使用不同的缩放@media (-webkit-min-device-pixel-ratio: 1.5),(min-device-pixel-ratio: 1.5){ .border-1px { .border-1px; &amp;:after { -webkit-transform: scaleY(0.7); -moz-transform: scaleY(0.7); -ms-transform: scaleY(0.7); -o-transform: scaleY(0.7); transform: scaleY(0.7); } }}@media (-webkit-min-device-pixel-ratio: 2),(min-device-pixel-ratio: 2){ .border-1px { .border-1px; &amp;:after { -webkit-transform: scaleY(0.5); -moz-transform: scaleY(0.5); -ms-transform: scaleY(0.5); -o-transform: scaleY(0.5); transform: scaleY(0.5); } }}@media (-webkit-min-device-pixel-ratio: 3),(min-device-pixel-ratio: 3){ .border-1px { .border-1px; &amp;:after { -webkit-transform: scaleY(0.3); -moz-transform: scaleY(0.3); -ms-transform: scaleY(0.3); -o-transform: scaleY(0.3); transform: scaleY(0.3); } }} 3. viewport视图 view 端口 port 2.1 什么是视口在移动端viewport视口就是浏览器显示页面内容的屏幕区域,在viewport中有两种视口,分别表示为 : visual viewport (可视视口/视觉) 和 layout viewport (布局视口),两个视口是叠加在一起 布局视口 Layout Viewport 指网页的宽度，一般移动端浏览器默认设置了布局视口的宽度，根据设备不同，默认宽度可能不同。 768、980、1024等，通过document.documentElement.clientWidth获取。 之所有采用默认设置，是为了解决早期pc端页面在手机上显示的问题。 视觉视口 Visual Viewport 指用户正在看到的页面区域，这个区域等同于移动设备浏览器窗口宽度。 当手机中缩放页面时，操作的是视觉视口，布局视口仍然保持原来宽度。 理想视口 Ideal Viewport 指对设备来讲最理想的视口尺寸。使网页在移动端浏览器上获得最理想的浏览阅读宽度。 理想视口情况下，布局视口的大小和屏幕宽度保持一致，这样就不会出现左右滚动页面。 开发中，为了实现理想视口，给移动端网页配置meta标签，通知浏览器处理。 2.2 视口的设置通过&lt;meta&gt;标签进行设置,name属性指定viewport的值, content属性进行视口配置 取值 含义 width 设置layout view的宽度为特定值 device-width表示设备的宽度 height 设置layout view的宽度为特定值,一般不设置 initial-scale 设置页面初始缩放 minimum-scale 设置页面最小缩放 maximum-scale 设置页面的最大缩放 user-scalable 设置页面能否缩放 yes/no meta 原本是 safari 浏览器的一个html 扩展标签，被很多浏览器复用。viewport 用于设置 layout的宽度。 http://gs.statcounter.com 浏览器市场占比 4、自适应适配方案(布局方案)4.1 先了解一些单位 px: 本质上是相对单位，但是由于 pc端 都是普通屏幕，而移动端都是相对于 设备独立像素开发，所以，可以看成是绝对单位。 em: 相对单位, 1em等于当前元素的font-size值 如果本级元素没有设置字号，则会遵守css继承规则 在父级都没有设置字体的情况下，会继承浏览器默认的设置 目前大部分浏览器的默认字体大小是 16px，所以取默认值，可以根据浏览器进行设置 如果做响应式的话，em无疑是比较适合的，但是我们需要频繁去设置字体 rem 相对单位 r -&gt; root 根节点( html ) 根据html的字体大小计算其他元素尺寸 1rem 就是html的font-size值 rem 与本级元素字号无关 rem与父级元素字号无关 em只根据 根节点 html的字号来进行参考，在没有设置的情况下，取浏览器的默认值 16 但是这是不可控的，所以为了统一标准，还是要事先进行设置 rem的出现 其实就是 弥补 em的不足，用来更好的进行响应式布局 vw/vh ; 把屏幕分为100份, 1vw就等于屏幕宽度的1% vw和vh 是相对于 设备的尺寸来进行布局 几种适配方案： 百分比、媒体查询、rem、固定宽度、vw 4.2 百分比与Flex布局布局的特性: 关键元素高宽和位置都不变，只有容器元素在做伸缩变换 这种布局是一种典型的弹性布局 布局的方式: 布局盒子采用百分比 容器盒子与文字采用固定大小 Flex 确定位置(也可以采用浮动) 优缺点: 好处: 大屏下可以展示更多内容 坏处: 宽屏下比例会比较不协调 注意: 这种情况css尺寸单位用px就好，不要用rem，避免增加复杂度。 例子: 【拉勾网】, 【美团】 4.3 媒体查询meida queries 的方式可以说是早期采用的布局方式，它主要是通过查询设备的宽度来执行不同的 css 代码，最终达到界面的配置。核心语法是： 123@media screen and (max-width: 600px) { /*当屏幕尺寸小于600px时，应用下面的CSS样式*/ /*你的css代码*/} 优点 方法简单，成本低，特别是对移动和PC维护同一套代码的时候。 调整屏幕宽度的时候不用刷新页面即可响应式展示 缺点 代码量比较大，维护不方便 为了兼顾大屏幕或高清设备，会造成其他设备资源浪费，特别是加载图片资源 为了兼顾移动端和PC端各自响应式的展示效果，难免会损失各自特有的交互方式 4.4 rem布局布局的特性: 关键元素盒子大小与文字都随着屏幕大小不同,而展示不同的大小 布局的方式: 根据屏幕大小不同设置html不同的字体大小 所有的盒子尺寸和文字大小采用rem的布局方式 动态设置font-size 设置方式 1234const html = document.documentElement;const width = html.getBoundingClientRect().width;html.style.fontSize = width / 7.5 + 'px';// 因为一般设计图都是 750px的，所以 整除 7.5 ，换算的时候比较方便 字体也可以不使用rem单位(通常也不建议字体用rem单位), 采用不同的媒介方式, 1234567891011@media screen and (max-width:321px){ .basesize{font-size:15px}}@media screen and (min-width:321px) and (max-width:400px){ .basesize{font-size:16px}}@media screen and (min-width:400px){ .basesize{font-size:18px}} 如果只是希望盒子根据屏幕大小不同而改变, 但是文字大小不改变,可以在body重新固定文字大小 123body{ font-size:16px;} 代表网站 【网易】、【淘宝】 4.5 固定缩放布局.固定高度宽度.文字大小，通过改变缩放比例适配 根据屏幕的分辨率动态设置适配缩放比例，达到等比缩放的功能 根据dpr来设置不同的viewport缩放比例 12345678910111213141516171819// 改变视口的缩放比例(function(){ const width = window.screen.width; const fixWidth = 750; // 根据设计图来 const ratio = width / fixWidth; const meta = document.querySelector('meta[name=viewport]') meta.setAttribute( 'content', 'width=' + fixWidth + ', initial-scale=' + ratio + ', maximum-scale=' + ratio + ', user-scalable=no' );})() 代表网站: 【天猫】 4.6通过vw设置 html 字体 1vw 代表 屏幕的 1% 以iphone6为例 375px=100vw 1vw = 3.75如果我希望 html的字体大小是100px 123html{ font-size:26.6666667vw;} 如果切换到iphone 6plus 1vw = 4.41px 注意, 要给body重置一下font-size: 16px; 代表网站： 【网易】 其他小技巧 固比固 三栏布局, 利用box-sizing 12345678910111213141516171819202122232425262728#box{ position: relative; width: 100%; height: 60px;}#box .left{ position: absolute; top: 0; left: 0; width:60px; height: 100%; background-color: red;}#box .content{ width: 100%; height: 100%; background-color: blue; padding:0 60px; box-sizing:border-box;}#box .right{ position: absolute; top: 0; right: 0; width:60px; height: 100%; background-color: yellow;} 利用flex 1234567891011121314151617181920#box{ width: 100%; height: 60px; display:flex;}#box .left{ width:60px; height: 100%; background-color: red;}#box .content{ flex:1; height: 100%; background-color: blue;}#box .right{ width:60px; height: 100%; background-color: yellow;} 设置高度按比例变换 不设置高度 盒子不设置高度,图片宽度100%,高度默认按比例缩放 2.采用padding-top给盒子设置自动,然后用背景图 借用padding-top来处理,我们知道padding也可以显示背景 123width: 60%;height: 0;padding-top:60%; padding-bottom也可以但是,padding-top更好一点 ,因为可以overflow:hidden ;关闭超出的部分 3.通过js 12var boxWidth = parseInt(getComputedStyle(box)['width']);box.style.height = boxWidth+'px' 补充: https://h5.m.taobao.com/#index 手机淘宝 remhttp://m.jd.com/ 手机京东 100%http://jx.tmall.com/ 天猫 100%http://3g.163.com/touch/all?nav=1&amp;version=v_standard 网易 rem http://www.cnblogs.com/2050/p/3877280.html viewport 解析meta解析http://ljinkai.github.io/2015/06/06/mobile-web-skill/ 移动端布局注意技巧 https://gs.statcounter.com/browser-market-share 浏览器使用占比","categories":[],"tags":[]},{"title":"解决进不去github官网","slug":"解决进不去githu官网","date":"2021-03-12T05:42:43.493Z","updated":"2021-03-28T07:43:47.499Z","comments":true,"path":"2021/03/12/解决进不去githu官网/","link":"","permalink":"http://example.com/2021/03/12/%E8%A7%A3%E5%86%B3%E8%BF%9B%E4%B8%8D%E5%8E%BBgithu%E5%AE%98%E7%BD%91/","excerpt":"","text":"解决github官网进不去** 不能进入GitHub官网的解决办法**一：分别获取你的github.com、github.global.ssl.fastly.net对应的IP（每台电脑的可能不一样）链接:https://fastly.net.ipaddress.com/github.global.ssl.fastly.net 链接：http://github.com.ipaddress.com/ 登录以上两个链接可以看到两个地址分别获取你的github.com、github.global.ssl.fastly.net对应的IP分别为：199.232.69.194140.82.113.3 二、修改hosts文件文件路径：C:\\Windows\\System32\\drivers\\etc找到host文件，接着将140.82.113.3 github.com199.232.69.194 github.global.ssl.fastly.net添加到hosts文件中。 三、更新DNS缓存打开CMD运行如下命令 ipconfig /flushdns也可以输入：ping github.com看看能不能ping通 到这里就成功了，然后就可以访问GitHub官网了。————————————————版权声明：本文为CSDN博主「永和|九年」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/m0_50693034/article/details/109287344","categories":[],"tags":[]},{"title":"欢迎光临","slug":"欢迎光临","date":"2021-03-12T04:15:25.678Z","updated":"2021-03-28T07:46:26.348Z","comments":true,"path":"2021/03/12/欢迎光临/","link":"","permalink":"http://example.com/2021/03/12/%E6%AC%A2%E8%BF%8E%E5%85%89%E4%B8%B4/","excerpt":"欢迎光临","text":"欢迎光临我的博客 第一次搭建博客","categories":[],"tags":[]}],"categories":[],"tags":[]}